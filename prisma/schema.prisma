// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  username     String        @unique
  password     String
  company      String?
  bio          String?
  messages     Message[]
  settings     Settings?
  platforms    Platform[]
  integrations Integration[] // Nova tabela de integrações
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([username, email])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  platforms  MessagePlatform[]
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime @default(now())
}

enum MessageStatus {
  success
  failed
  pending
}

enum PlatformName {
  WHATSAPP
  TELEGRAM
  INSTAGRAM
}

model Platform {
  id               String            @id @default(uuid())
  name             PlatformName
  token            String?
  connected        Boolean           @default(false)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  messagePlatforms MessagePlatform[] // Relacionamento reverso
  lastSyncAt       DateTime?         // Última sincronização com a API
  
  @@unique([userId, name])  // Um usuário não pode ter 2 conexões para a mesma plataforma
}

model Settings {
  id                  String   @id @default(uuid())
  emailNotifications  Boolean  @default(true)
  pushNotifications   Boolean  @default(false)
  smsNotifications    Boolean  @default(false)
  weeklyReport        Boolean  @default(true)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String   @unique
}

model MessagePlatform {
  id          String        @id @default(uuid())
  message     Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String
  platform    Platform      @relation(fields: [platformId], references: [id], onDelete: Cascade)
  platformId  String
  status      MessageStatus @default(pending)
  sentAt      DateTime?     // Timestamp real do envio para esta plataforma
  externalId  String?       // ID retornado pela API (tweet ID, post ID, etc.)
  errorMsg    String?       // Mensagem de erro específica da plataforma
  retryCount  Int          @default(0)  // Quantas vezes tentou reenviar
  createdAt   DateTime     @default(now())
  
  @@unique([messageId, platformId])  // Uma mensagem não pode ser enviada 2x para a mesma plataforma
}

// Modelos para sistema de integrações com Evolution API
enum IntegrationPlatformType {
  WHATSAPP
  EVOLUTION
  TELEGRAM
}

enum IntegrationStatus {
  DISCONNECTED
  CONNECTING
  CONNECTED
  ERROR
  EXPIRED
}

model Integration {
  id                      String                  @id @default(uuid())
  platform                IntegrationPlatformType
  name                    String
  status                  IntegrationStatus       @default(DISCONNECTED)
  config                  Json                    // Configurações específicas da plataforma
  metadata                Json                    // Metadados da integração
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  selectedConversations   SelectedConversation[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model SelectedConversation {
  id                  String              @id @default(uuid())
  externalId          String              // ID da conversa na Evolution API
  name                String              // Nome da conversa (grupo ou contato)
  type                ConversationType    // Tipo da conversa
  integration         Integration         @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId       String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  @@unique([integrationId, externalId])
}

enum ConversationType {
  INDIVIDUAL
  GROUP
}
