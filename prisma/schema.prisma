// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  username     String        @unique
  password     String
  company      String?
  bio          String?
  messages     Message[]
  settings     Settings?
  integrations Integration[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([username, email])
}

model Message {
  id              String              @id @default(uuid())
  content         String
  scheduledFor    DateTime?           // Data/hora de agendamento
  isScheduled     Boolean             @default(false) // Flag para mensagens agendadas
  sentAt          DateTime?           // Timestamp real do processamento/envio
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  messageDeliveries MessageDelivery[] // Rastreamento de envio por integração/conversa
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SENT
  FAILED
  SCHEDULED
}

// Nova tabela para rastrear envios por integração/conversa
model MessageDelivery {
  id                      String                @id @default(uuid())
  message                 Message               @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId               String
  integration             Integration           @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId           String
  selectedConversation    SelectedConversation  @relation(fields: [selectedConversationId], references: [id], onDelete: Cascade)
  selectedConversationId  String
  status                  DeliveryStatus        @default(PENDING)
  externalId              String?               // ID retornado pela API externa
  sentAt                  DateTime?             // Timestamp do envio real
  errorMessage            String?               // Mensagem de erro específica
  retryCount              Int                   @default(0)
  lastRetryAt             DateTime?             // Último retry
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  
  @@unique([messageId, integrationId, selectedConversationId]) // Não duplicar envio para mesma conversa
}

model Settings {
  id                  String   @id @default(uuid())
  emailNotifications  Boolean  @default(true)
  pushNotifications   Boolean  @default(false)
  smsNotifications    Boolean  @default(false)
  weeklyReport        Boolean  @default(true)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String   @unique
}

// Modelos para sistema de integrações
enum IntegrationPlatformType {
  WHATSAPP
  EVOLUTION
  TELEGRAM
}

enum IntegrationStatus {
  DISCONNECTED
  CONNECTING
  CONNECTED
  ERROR
  EXPIRED
}

model Integration {
  id                      String                  @id @default(uuid())
  platform                IntegrationPlatformType
  name                    String
  status                  IntegrationStatus       @default(DISCONNECTED)
  config                  Json                    // Configurações específicas da plataforma
  metadata                Json                    // Metadados da integração
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  selectedConversations   SelectedConversation[]
  messageDeliveries       MessageDelivery[]       // Rastreamento de envios
  lastSyncAt              DateTime?               // Última sincronização
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model SelectedConversation {
  id                  String              @id @default(uuid())
  externalId          String              // ID da conversa na API externa
  name                String              // Nome da conversa (grupo ou contato)
  type                ConversationType    // Tipo da conversa
  active              Boolean             @default(true) // Se está ativa para envios
  integration         Integration         @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId       String
  messageDeliveries   MessageDelivery[]   // Envios para esta conversa
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  @@unique([integrationId, externalId])
}

enum ConversationType {
  INDIVIDUAL
  GROUP
}
